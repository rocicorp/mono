CREATE TABLE "comment" (
	"id" varchar PRIMARY KEY NOT NULL,
	"issueID" varchar,
	"created" double precision,
	"body" text NOT NULL,
	"creatorID" varchar
);
--> statement-breakpoint
CREATE TABLE "emoji" (
	"id" varchar PRIMARY KEY NOT NULL,
	"value" varchar NOT NULL,
	"annotation" varchar,
	"subjectID" varchar NOT NULL,
	"creatorID" varchar,
	"created" double precision DEFAULT (EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric),
	CONSTRAINT "emoji_subjectID_creatorID_value_key" UNIQUE("value","subjectID","creatorID")
);
--> statement-breakpoint
CREATE TABLE "issue" (
	"id" varchar PRIMARY KEY NOT NULL,
	"shortID" integer GENERATED BY DEFAULT AS IDENTITY (sequence name "issue_shortID_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 3000 CACHE 1),
	"title" varchar(128) NOT NULL,
	"open" boolean NOT NULL,
	"modified" double precision DEFAULT (EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric),
	"created" double precision DEFAULT (EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric),
	"creatorID" varchar NOT NULL,
	"assigneeID" varchar,
	"description" varchar(10240) DEFAULT '',
	"visibility" varchar DEFAULT 'public' NOT NULL
);
--> statement-breakpoint
CREATE TABLE "issueLabel" (
	"labelID" varchar NOT NULL,
	"issueID" varchar NOT NULL,
	CONSTRAINT "issueLabel_pkey" PRIMARY KEY("labelID","issueID")
);
--> statement-breakpoint
CREATE TABLE "issueNotifications" (
	"userID" varchar NOT NULL,
	"issueID" varchar NOT NULL,
	"subscribed" boolean DEFAULT true,
	"created" double precision DEFAULT (EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric),
	CONSTRAINT "issueNotifications_pkey" PRIMARY KEY("userID","issueID")
);
--> statement-breakpoint
CREATE TABLE "label" (
	"id" varchar PRIMARY KEY NOT NULL,
	"name" varchar NOT NULL
);
--> statement-breakpoint
CREATE TABLE "user" (
	"id" varchar PRIMARY KEY NOT NULL,
	"login" varchar NOT NULL,
	"name" varchar,
	"avatar" varchar,
	"role" varchar DEFAULT 'user' NOT NULL,
	"githubID" integer NOT NULL,
	"email" varchar
);
--> statement-breakpoint
CREATE TABLE "userPref" (
	"key" varchar NOT NULL,
	"value" varchar NOT NULL,
	"userID" varchar NOT NULL,
	CONSTRAINT "userPref_pkey" PRIMARY KEY("key","userID")
);
--> statement-breakpoint
CREATE TABLE "viewState" (
	"userID" varchar NOT NULL,
	"issueID" varchar NOT NULL,
	"viewed" double precision,
	CONSTRAINT "viewState_pkey" PRIMARY KEY("userID","issueID")
);
--> statement-breakpoint
ALTER TABLE "comment" ADD CONSTRAINT "comment_issueID_fkey" FOREIGN KEY ("issueID") REFERENCES "public"."issue"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "comment" ADD CONSTRAINT "comment_creatorID_fkey" FOREIGN KEY ("creatorID") REFERENCES "public"."user"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "emoji" ADD CONSTRAINT "emoji_creatorID_fkey" FOREIGN KEY ("creatorID") REFERENCES "public"."user"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "issue" ADD CONSTRAINT "issue_creatorID_fkey" FOREIGN KEY ("creatorID") REFERENCES "public"."user"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "issue" ADD CONSTRAINT "issue_assigneeID_fkey" FOREIGN KEY ("assigneeID") REFERENCES "public"."user"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "issueLabel" ADD CONSTRAINT "issueLabel_labelID_fkey" FOREIGN KEY ("labelID") REFERENCES "public"."label"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "issueLabel" ADD CONSTRAINT "issueLabel_issueID_fkey" FOREIGN KEY ("issueID") REFERENCES "public"."issue"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "issueNotifications" ADD CONSTRAINT "issueNotifications_userID_fkey" FOREIGN KEY ("userID") REFERENCES "public"."user"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "issueNotifications" ADD CONSTRAINT "issueNotifications_issueID_fkey" FOREIGN KEY ("issueID") REFERENCES "public"."issue"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "userPref" ADD CONSTRAINT "userPref_userID_fkey" FOREIGN KEY ("userID") REFERENCES "public"."user"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "viewState" ADD CONSTRAINT "viewState_userID_fkey" FOREIGN KEY ("userID") REFERENCES "public"."user"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "viewState" ADD CONSTRAINT "viewState_issueID_fkey" FOREIGN KEY ("issueID") REFERENCES "public"."issue"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "comment_issueid_idx" ON "comment" USING btree ("issueID");--> statement-breakpoint
CREATE INDEX "emoji_created_idx" ON "emoji" USING btree ("created");--> statement-breakpoint
CREATE INDEX "emoji_subject_id_idx" ON "emoji" USING btree ("subjectID");--> statement-breakpoint
CREATE INDEX "issue_created_idx" ON "issue" USING btree ("created");--> statement-breakpoint
CREATE INDEX "issue_modified_idx" ON "issue" USING btree ("modified");--> statement-breakpoint
CREATE INDEX "issue_open_modified_idx" ON "issue" USING btree ("open","modified");--> statement-breakpoint
CREATE INDEX "issuelabel_issueid_idx" ON "issueLabel" USING btree ("issueID");--> statement-breakpoint
CREATE UNIQUE INDEX "user_githubid_idx" ON "user" USING btree ("githubID");--> statement-breakpoint
CREATE UNIQUE INDEX "user_login_idx" ON "user" USING btree ("login");
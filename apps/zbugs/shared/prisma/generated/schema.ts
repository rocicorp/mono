// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from '@rocicorp/zero';

// Define tables

export const commentTable = table('comment')
  .columns({
    id: string(),
    issueID: string().optional(),
    created: number().optional(),
    body: string(),
    creatorID: string().optional(),
  })
  .primaryKey('id');

export const emojiTable = table('emoji')
  .columns({
    id: string(),
    value: string(),
    annotation: string().optional(),
    subjectID: string(),
    creatorID: string().optional(),
    created: number().optional(),
  })
  .primaryKey('id');

export const issueTable = table('issue')
  .columns({
    id: string(),
    shortID: number().optional(),
    title: string(),
    open: boolean(),
    modified: number().optional(),
    created: number().optional(),
    creatorID: string(),
    assigneeID: string().optional(),
    description: string().optional(),
    visibility: string(),
  })
  .primaryKey('id');

export const issueLabelTable = table('issueLabel')
  .columns({
    labelID: string(),
    issueID: string(),
  })
  .primaryKey('labelID', 'issueID');

export const labelTable = table('label')
  .columns({
    id: string(),
    name: string(),
  })
  .primaryKey('id');

export const userTable = table('user')
  .columns({
    id: string(),
    login: string(),
    name: string().optional(),
    avatar: string().optional(),
    role: string(),
  })
  .primaryKey('id');

export const userPrefTable = table('userPref')
  .columns({
    key: string(),
    value: string(),
    userID: string(),
  })
  .primaryKey('userID', 'key');

export const viewStateTable = table('viewState')
  .columns({
    userID: string(),
    issueID: string(),
    viewed: number().optional(),
  })
  .primaryKey('userID', 'issueID');

// Define relationships

export const commentTableRelationships = relationships(
  commentTable,
  ({one, many}) => ({
    creator: one({
      sourceField: ['creatorID'],
      destField: ['id'],
      destSchema: userTable,
    }),
    emoji: many({
      sourceField: ['id'],
      destField: ['subjectID'],
      destSchema: emojiTable,
    }),
    issue: one({
      sourceField: ['issueID'],
      destField: ['id'],
      destSchema: issueTable,
    }),
  }),
);

export const emojiTableRelationships = relationships(emojiTable, ({one}) => ({
  creator: one({
    sourceField: ['creatorID'],
    destField: ['id'],
    destSchema: userTable,
  }),
  issue: one({
    sourceField: ['subjectID'],
    destField: ['id'],
    destSchema: issueTable,
  }),
  comment: one({
    sourceField: ['subjectID'],
    destField: ['id'],
    destSchema: commentTable,
  }),
}));

export const issueTableRelationships = relationships(
  issueTable,
  ({one, many}) => ({
    assignee: one({
      sourceField: ['assigneeID'],
      destField: ['id'],
      destSchema: userTable,
    }),
    comments: many({
      sourceField: ['id'],
      destField: ['issueID'],
      destSchema: commentTable,
    }),
    creator: one({
      sourceField: ['creatorID'],
      destField: ['id'],
      destSchema: userTable,
    }),
    emoji: many({
      sourceField: ['id'],
      destField: ['subjectID'],
      destSchema: emojiTable,
    }),
    viewState: many({
      sourceField: ['id'],
      destField: ['issueID'],
      destSchema: viewStateTable,
    }),
  }),
);

export const issueLabelTableRelationships = relationships(
  issueLabelTable,
  ({one}) => ({
    issue: one({
      sourceField: ['issueID'],
      destField: ['id'],
      destSchema: issueTable,
    }),
  }),
);

export const userTableRelationships = relationships(userTable, ({many}) => ({
  createdIssues: many({
    sourceField: ['id'],
    destField: ['creatorID'],
    destSchema: issueTable,
  }),
}));

export const viewStateTableRelationships = relationships(
  viewStateTable,
  ({one}) => ({
    issue: one({
      sourceField: ['issueID'],
      destField: ['id'],
      destSchema: issueTable,
    }),
  }),
);

// Define schema

export const schema = createSchema({
  tables: [
    commentTable,
    emojiTable,
    issueTable,
    issueLabelTable,
    labelTable,
    userTable,
    userPrefTable,
    viewStateTable,
  ],
  relationships: [
    commentTableRelationships,
    emojiTableRelationships,
    issueTableRelationships,
    issueLabelTableRelationships,
    userTableRelationships,
    viewStateTableRelationships,
  ],
});

// Define types
export type Schema = typeof schema;
export type Comment = Row<typeof schema.tables.comment>;
export type Emoji = Row<typeof schema.tables.emoji>;
export type Issue = Row<typeof schema.tables.issue>;
export type IssueLabel = Row<typeof schema.tables.issueLabel>;
export type Label = Row<typeof schema.tables.label>;
export type User = Row<typeof schema.tables.user>;
export type UserPref = Row<typeof schema.tables.userPref>;
export type ViewState = Row<typeof schema.tables.viewState>;

generator zero {
  provider     = "prisma-generator-zero"
  output       = "../shared/prisma/generated/"
  relationMode = "prisma"
  enumAsUnion  = true
  prettier     = true
}

datasource db {
  provider = "postgresql"
  url      = env("ZERO_UPSTREAM_DB")
}

model Comment {
  id        String  @id @db.VarChar
  issueID   String @db.VarChar
  created   Float
  body      String
  creatorID String  @db.VarChar

  creator User?   @relation(fields: [creatorID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emoji   Emoji[]
  issue   Issue?  @relation(fields: [issueID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([issueID], map: "comment_issueid_idx")
  @@map("comment")
}

model Emoji {
  id         String  @id @db.VarChar
  value      String  @db.VarChar
  annotation String? @db.VarChar
  subjectID  String  @db.VarChar
  creatorID  String? @db.VarChar
  created    Float   @default(dbgenerated("(EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric)"))

  creator User?    @relation(fields: [creatorID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  issue   Issue?   @relation(fields: [subjectID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "emoji_subject_id_issue_idx")
  comment Comment? @relation(fields: [subjectID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "emoji_subject_id_comment_idx")

  @@unique([subjectID, creatorID, value])
  @@index([created])
  @@index([subjectID], map: "emoji_subject_id_idx")
  @@map("emoji")
}

model Issue {
  id          String  @id @db.VarChar
  shortID     Int?    @default(dbgenerated("GENERATED BY DEFAULT AS IDENTITY (START WITH 3000)"))
  title       String  @db.VarChar(128)
  open        Boolean
  modified    Float   @default(dbgenerated("(EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric)"))
  created     Float   @default(dbgenerated("(EXTRACT(epoch FROM CURRENT_TIMESTAMP) * (1000)::numeric)"))
  creatorID   String  @db.VarChar
  assigneeID  String? @db.VarChar
  description String  @default("") @db.VarChar(10240)
  visibility  String  @default("public") @db.VarChar
  testJson    Json?   @default("{}") @ignore

  assignee    User?        @relation("issue_assigneeIDToUser", fields: [assigneeID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments    Comment[]
  creator     User         @relation("issue_creatorIDToUser", fields: [creatorID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emoji       Emoji[]
  viewState   ViewState[]
  issueLabels IssueLabel[] @ignore
  // labels is manually done due to limitations in the Prisma ORM

  @@index([created])
  @@index([modified])
  @@index([open, modified])
  @@map("issue")
}

model IssueLabel {
  labelID String @db.VarChar
  issueID String @db.VarChar

  issue Issue @relation(fields: [issueID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([labelID, issueID])
  @@index([issueID], map: "issueLabel_issueid_idx")
  @@map("issueLabel")
}

model Label {
  id   String @id @db.VarChar
  name String @db.VarChar

  @@map("label")
}

enum Role {
  user
  crew
}

model User {
  id       String  @id @db.VarChar
  login    String  @unique(map: "user_login_idx") @db.VarChar
  name     String? @db.VarChar
  avatar   String  @db.VarChar
  role     Role    @default(user)
  githubID Int     @unique(map: "user_githubid_idx") @ignore

  comments       Comment[] @ignore
  emoji          Emoji[]   @ignore
  assignedIssues Issue[]   @relation("issue_assigneeIDToUser") @ignore
  createdIssues  Issue[]   @relation("issue_creatorIDToUser")

  @@map("user")
}

model UserPref {
  key    String @db.VarChar
  value  String @db.VarChar
  userID String @db.VarChar

  @@id([userID, key])
  @@map("userPref")
}

model ViewState {
  userID  String @db.VarChar
  issueID String @db.VarChar
  viewed  Float?

  issue Issue @relation(fields: [issueID], references: [id])

  @@id([userID, issueID])
  @@map("viewState")
}

name: Bencher PR

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
  workflow_dispatch:
    inputs:
      head_branch:
        description: 'PR head branch (manual runs only)'
        type: string
        default: ''
      base_branch:
        description: 'Baseline branch (--start-point)'
        type: string
        default: 'main'
      reset_baseline:
        description: 'Pass --start-point-reset (manual runs only)'
        type: boolean
        default: false

jobs:
  file_sizes:
    name: File Sizes PR
    # DO NOT REMOVE: For handling Fork PRs see Pull Requests from Forks
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository

    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: rocicorp
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
      - uses: bencherdev/bencher@main

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            node_modules/.vite-temp
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-

      - run: npm ci

      - run: npm run build

      - name: Build npm zero package
        working-directory: packages/zero
        run: |
          npm pack --pack-destination ./out
          mv ./out/*.tgz ./out/zero-package.tgz

      - name: Build zero client single file package
        working-directory: packages/zero
        run: npx tsx tool/build.ts --bundle-sizes --minify

      - name: Compress
        working-directory: packages/zero
        run: brotli out/zero.js

      - name: Upload PR benchmarks results to bencher.dev
        working-directory: packages/zero
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          if [[ -n "${{ inputs.head_branch }}" ]]; then BRANCH="${{ inputs.head_branch }}"; fi

          BASE="${{ github.event.pull_request.base.ref || inputs.base_branch }}"
          FLAGS=( --start-point "$BASE" --start-point-clone-thresholds )

          SHA="${{ github.event.pull_request.base.sha }}"
          if [[ -n "$SHA" ]]; then FLAGS+=( --start-point-hash "$SHA" ); fi
          if [[ "${{ inputs.reset_baseline }}" == "true" ]]; then FLAGS+=( --start-point-reset ); fi

          bencher run \
          --project zero \
          --token '${{ secrets.BENCHER_API_TOKEN }}' \
          --adapter json \
          --github-actions '${{ secrets.GITHUB_TOKEN }}' \
          --ci-id size \
          --branch "$BRANCH" \
          "${FLAGS[@]}" \
          --threshold-measure file-size \
          --threshold-test percentage \
          --threshold-upper-boundary 0.02 \
          --threshold-max-sample-size 2 \
          --err \
          --file-size out/zero-package.tgz \
          --file-size out/zero.js.br \
          --file-size out/zero.js

  perf:
    name: Perf PR
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository

    permissions:
      pull-requests: write
    runs-on: self-hosted
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: rocicorp
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
      - uses: bencherdev/bencher@main

      - run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run benchmarks
        working-directory: packages/zero-client
        run: npm run bench -- --browser.name=chromium --outputJson output.json

      - name: Upload PR benchmarks results to bencher.dev
        working-directory: packages/zero-client
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          if [[ -n "${{ inputs.head_branch }}" ]]; then BRANCH="${{ inputs.head_branch }}"; fi

          BASE="${{ github.event.pull_request.base.ref || inputs.base_branch }}"
          FLAGS=( --start-point "$BASE" --start-point-clone-thresholds )

          SHA="${{ github.event.pull_request.base.sha }}"
          if [[ -n "$SHA" ]]; then FLAGS+=( --start-point-hash "$SHA" ); fi
          if [[ "${{ inputs.reset_baseline }}" == "true" ]]; then FLAGS+=( --start-point-reset ); fi

          cat output.json |\
          npx tsx ../shared/src/tool/vitest-perf-json-to-bmf.ts |\
          bencher run \
          --project zero \
          --token '${{ secrets.BENCHER_API_TOKEN }}' \
          --adapter json \
          --github-actions '${{ secrets.GITHUB_TOKEN }}' \
          --ci-id perf \
          --branch "$BRANCH" \
          "${FLAGS[@]}" \
          --threshold-measure throughput \
          --threshold-test t_test \
          --threshold-lower-boundary 0.90 \
          --err
